{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { HandlerType } from '@metamask/snaps-utils';\nimport { Json } from '@metamask/utils';\nimport { Buffer } from 'buffer';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { deferredPromise, DeferredPromise } from './util';\n\nexport const type = 'Snap Keyring';\n\nexport type Origin = string; // Origin of the snap\nexport type Address = string; // String public address\nexport type PublicKey = Buffer; // 33 or 64 byte public key\nexport type JsonWallet = [PublicKey, Json];\nexport type SnapWallet = Map<Address, Origin>;\n\n// Type for serialized format.\nexport type SerializedWallets = {\n  [key: string]: string;\n};\n\nclass SnapKeyring {\n  static type: string;\n\n  type: string;\n\n  _addressToOrigin: SnapWallet;\n\n  _provider: any;\n\n  _snapController: any;\n\n  _pendingRequests: Map<string, DeferredPromise>;\n\n  constructor() {\n    this.type = type;\n    this._addressToOrigin = new Map();\n    this._pendingRequests = new Map();\n  }\n\n  // keyrings cant take constructor arguments so we\n  // late-set the provider\n  setProvider(provider: any, snapController: any) {\n    console.log('setProvider', provider, snapController);\n    this._provider = provider;\n    this._snapController = snapController;\n  }\n\n  async sendRequestToSnap(origin: Origin, request: any): Promise<any> {\n    console.log('setProvider', this._provider, this._snapController);\n    // return this._provider.request({\n    //   method: 'wallet_invokeSnap',\n    //   params: {\n    //     snapId: origin,\n    //     request,\n    //   },\n    // });\n    return this._snapController.handleRequest({\n      snapId: origin,\n      origin: 'metamask',\n      handler: HandlerType.OnRpcRequest,\n      request,\n    });\n  }\n\n  async sendSignatureRequestToSnap(origin: Origin, request: any): Promise<any> {\n    console.log('sendSignatureRequest', origin, request);\n    const resP = this.sendRequestToSnap(origin, {\n      method: 'snap_keyring_sign_request',\n      params: request,\n    });\n    console.log('sendSignatureRequest returned');\n    try {\n      const result = await resP;\n      console.log('sendSignatureRequest resolved', result);\n      return result;\n    } catch (err) {\n      console.log('sendSignatureRequest error', err);\n      throw err;\n    }\n  }\n\n  async handleKeyringSnapMessage(\n    origin: Origin,\n    message: any,\n    saveSnapKeyring: Function,\n  ): Promise<any> {\n    const [methodName, params] = message;\n\n    switch (methodName) {\n      case 'create': {\n        const address = params as Address;\n        const added = this.createAccount(origin, address);\n        if (added) {\n          await saveSnapKeyring();\n        }\n        return added;\n      }\n      case 'read': {\n        const accounts = this.listAccounts(origin);\n        return accounts;\n      }\n      // case 'update': {\n\n      // }\n      case 'delete': {\n        const address = params as Address;\n        if (address) {\n          const deleted = this.deleteAccount(address);\n          if (deleted) {\n            // include deleted address\n            await saveSnapKeyring(address);\n          }\n          return deleted;\n        }\n        return;\n      }\n\n      case 'submit': {\n        const { id, result } = params;\n        console.log('submit', id, result);\n        this.submitSignatureRequestResult(id, result);\n        return true;\n      }\n\n      default:\n        throw ethErrors.rpc.invalidParams({\n          message: 'Must specify a valid snap_manageAccounts \"methodName\".',\n        });\n    }\n  }\n\n  /**\n   * Convert the wallets in this keyring to a serialized form\n   * suitable for persistence.\n   *\n   * This function is synchronous but uses an async signature\n   * for consistency with other keyring implementations.\n   */\n  async serialize(): Promise<SerializedWallets> {\n    const output: SerializedWallets = {};\n    for (const [address, origin] of this._addressToOrigin.entries()) {\n      output[address] = origin;\n    }\n    return output;\n  }\n\n  /**\n   * Deserialize the given wallets into this keyring.\n   *\n   * This function is synchronous but uses an async signature\n   * for consistency with other keyring implementations.\n   *\n   * @param wallets\n   */\n  async deserialize(wallets: SerializedWallets | undefined): Promise<void> {\n    if (!wallets) {\n      return;\n    }\n    for (const [address, origin] of Object.entries(wallets)) {\n      this._addressToOrigin.set(address, origin);\n    }\n  }\n\n  /**\n   * Get an array of public addresses.\n   */\n  async getAccounts(): Promise<Address[]> {\n    return Array.from(this._addressToOrigin.keys());\n  }\n\n  /**\n   * Sign a transaction.\n   *\n   * @param address\n   * @param tx\n   * @param opts\n   */\n  async signTransaction(address: Address, tx: any, opts = {}) {\n    const origin = this._addressToOrigin.get(address);\n    if (origin === undefined) {\n      throw new Error(`No origin found for address \"${address}\"`);\n    }\n    const id = uuidv4();\n    const txParams = tx.toJSON();\n    // forward to snap\n    await this.sendSignatureRequestToSnap(origin, {\n      id,\n      method: 'eth_sendTransaction',\n      params: [txParams],\n    });\n    const signingPromise = deferredPromise();\n    console.log('new pending request', id);\n    this._pendingRequests.set(id, signingPromise);\n    // wait for signing to complete\n    const sigHexString = (await signingPromise.promise) as unknown as string;\n    const { v, r, s } = signatureHexStringToRsv(sigHexString);\n    console.log('signTransaction', sigHexString);\n    return tx._processSignature(v, r, s);\n  }\n\n  /**\n   * Sign a message.\n   *\n   * @param address\n   * @param data\n   * @param opts\n   */\n  async signMessage(address: Address, data: any, opts = {}) {\n    throw new Error('death to eth_sign!');\n  }\n\n  /**\n   * Sign a message.\n   *\n   * @param address\n   * @param data\n   * @param opts\n   */\n  // KeyringController says this should return a Buffer but it actually expects a string.\n  async signPersonalMessage(\n    address: Address,\n    data: any,\n    opts = {},\n  ): Promise<string> {\n    const origin = this._addressToOrigin.get(address);\n    if (origin === undefined) {\n      throw new Error(`No origin found for address \"${address}\"`);\n    }\n    const id = uuidv4();\n    // forward to snap\n    await this.sendSignatureRequestToSnap(origin, {\n      id,\n      method: 'personal_sign',\n      params: [data, address],\n    });\n    const signingPromise = deferredPromise();\n    console.log('new pending request', id);\n    this._pendingRequests.set(id, signingPromise);\n    // wait for signing to complete\n    const sigHexString = (await signingPromise.promise) as unknown as string;\n    console.log('signPersonalMessage', sigHexString);\n    return sigHexString;\n  }\n\n  /**\n   * Gets the private data associated with the given address so\n   * that it may be exported.\n   *\n   * If this keyring contains duplicate public keys the first\n   * matching address is exported.\n   *\n   * Used by the UI to export an account.\n   *\n   * @param address\n   */\n  exportAccount(address: Address): [PublicKey, Json] | undefined {\n    throw new Error('snap-keyring: \"exportAccount\" not supported');\n  }\n\n  /**\n   * Removes the first account matching the given public address.\n   *\n   * @param address\n   */\n  removeAccount(address: Address): boolean {\n    throw new Error('snap-keyring: \"removeAccount\" not supported');\n  }\n\n  /* SNAP RPC METHODS */\n\n  /**\n   * List the accounts for a snap origin.\n   *\n   * @param targetOrigin\n   */\n  listAccounts(targetOrigin: Origin): Address[] {\n    return Array.from(this._addressToOrigin.entries())\n      .filter(([address, origin]) => {\n        return origin === targetOrigin;\n      })\n      .map(([address, origin]) => {\n        return address;\n      });\n  }\n\n  /**\n   * Create an account for a snap origin.\n   *\n   * The account is only created if the public address does not\n   * already exist.\n   *\n   * This checks for duplicates in the context of the snap origin but\n   * not across all snaps. The keyring controller is responsible for checking\n   * for duplicates across all addresses.\n   *\n   * @param origin\n   * @param address\n   */\n  createAccount(origin: Origin, address: string): boolean {\n    const exists = this._addressToOrigin.has(address);\n    if (!exists) {\n      this._addressToOrigin.set(address, origin);\n      return true;\n    }\n    return false;\n  }\n\n  // /**\n  //  *  Read the private data for an account belonging to a snap origin.\n  //  */\n  // readAccount(origin: Origin, address: string): Json {\n  //   const accounts = this._addressToOrigin.get(address);\n  //   const value = accounts.find((v) => arrayEquals(v[0], address));\n  //   if (value) {\n  //     const [, privateData] = value;\n  //     return privateData;\n  //   }\n  //   return null;\n  // }\n\n  // /**\n  //  *  Update the private data for the account belonging to the snap origin.\n  //  *\n  //  *  The account must already exist.\n  //  */\n  // updateAccount(origin: Origin, _address: string, value: Json): boolean {\n  //   const address = Buffer.from(_address, \"hex\");\n  //   const accounts = this._addressToOrigin.get(origin) || [];\n  //   const exists = accounts.find((v) => arrayEquals(v[0], address));\n  //   if (exists) {\n  //     exists[1] = value;\n  //     return true;\n  //   }\n  //   return false;\n  // }\n\n  /**\n   * Delete the private data for an account belonging to a snap origin.\n   *\n   * @param address\n   */\n  deleteAccount(address: string): boolean {\n    return this._addressToOrigin.delete(address);\n  }\n\n  deleteAccountsByOrigin(origin: Origin): void {\n    for (const address of this.listAccounts(origin)) {\n      this._addressToOrigin.delete(address);\n    }\n  }\n\n  submitSignatureRequestResult(id: string, result: any): void {\n    const signingPromise = this._pendingRequests.get(id);\n    if (signingPromise === undefined) {\n      console.warn(\n        'submitSignatureRequestResult missing requested id',\n        id,\n        result,\n      );\n      return;\n    }\n    this._pendingRequests.delete(id);\n    signingPromise.resolve(result);\n  }\n}\n\nSnapKeyring.type = type;\n\nexport default SnapKeyring;\n\n/**\n *\n * @param signatureHexString\n */\nfunction signatureHexStringToRsv(signatureHexString: string) {\n  const r = signatureHexString.slice(0, 66);\n  const s = `0x${signatureHexString.slice(66, 130)}`;\n  const v = parseInt(signatureHexString.slice(130, 132), 16);\n  return { r, s, v };\n}\n"]}