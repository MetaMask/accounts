{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":";;;AAiBA;;;;GAIG;AACH,SAAgB,eAAe;IAC7B,IAAI,OAAmC,CAAC;IACxC,IAAI,MAAiC,CAAC;IAEtC,MAAM,OAAO,GAAG,IAAI,OAAO,CACzB,CAAC,YAAwB,EAAE,WAAuB,EAAE,EAAE;QACpD,OAAO,GAAG,YAAY,CAAC;QACvB,MAAM,GAAG,WAAW,CAAC;IACvB,CAAC,CACF,CAAC;IACF,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;AACtC,CAAC;AAXD,0CAWC","sourcesContent":["/**\n * A deferred Promise.\n *\n * A deferred Promise is one that can be resolved or rejected independently of\n * the Promise construction.\n *\n * @typedef {object} DeferredPromise\n * @property {Promise} promise - The Promise that has been deferred.\n * @property {() => void} resolve - A function that resolves the Promise.\n * @property {() => void} reject - A function that rejects the Promise.\n */\nexport interface DeferredPromise {\n  promise: Promise<any>;\n  resolve?: () => void;\n  reject?: () => void;\n}\n\n/**\n * Create a deferred Promise.\n *\n * @returns A deferred Promise.\n */\nexport function deferredPromise(): DeferredPromise {\n  let resolve: DeferredPromise['resolve'];\n  let reject: DeferredPromise['reject'];\n\n  const promise = new Promise<void>(\n    (innerResolve: () => void, innerReject: () => void) => {\n      resolve = innerResolve;\n      reject = innerReject;\n    },\n  );\n  return { promise, resolve, reject };\n}\n"]}